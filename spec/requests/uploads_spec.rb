# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/uploads' do
  # Upload. As you add validations to Upload, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    { files: [fixture_file_upload(Rails.root.join('spec/fixtures/1297245.marc'), 'application/octet-stream')] }
  end

  let(:valid_model_attributes) { valid_attributes.merge(stream: stream) }

  let(:invalid_attributes) do
    skip
  end

  let(:organization) { create(:organization) }
  let(:stream) { organization.default_stream }

  before do
    sign_in create(:admin)
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Upload.create! valid_model_attributes
      get organization_uploads_url(organization)
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      upload = Upload.create! valid_model_attributes
      get organization_upload_url(organization, upload)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_organization_upload_url(organization)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Upload' do
        expect do
          post organization_uploads_url(organization), params: { upload: valid_attributes }
        end.to change(Upload, :count).by(1)
      end

      it 'creates a new with url Upload stripping whitespace' do
        expect do
          post organization_uploads_url(organization), params: { upload: { url: ' http://example.com/file.mrc  ' } }
        end.to change(Upload, :count).by(1)
        expect(Upload.last.url).to eq 'http://example.com/file.mrc'
      end

      it 'redirects to the created upload' do
        post organization_uploads_url(organization), params: { upload: valid_attributes }
        expect(response).to redirect_to(organization_upload_url(organization, Upload.last))
      end
    end

    context 'with a stream parameter' do
      it 'creates a new Upload on the stream' do
        expect do
          post organization_uploads_url(organization), params: { stream: 'xyz', upload: valid_attributes }
        end.to change { organization.streams.find_or_initialize_by(slug: 'xyz').uploads.count }.by(1)
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Upload' do
        expect do
          post organization_uploads_url(organization), params: { upload: invalid_attributes }
        end.not_to change(Upload, :count)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post organization_uploads_url(organization), params: { upload: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested upload' do
      upload = Upload.create! valid_model_attributes
      expect do
        delete organization_upload_url(organization, upload)
      end.to change(Upload, :count).by(-1)
    end

    it 'redirects to the uploads list' do
      upload = Upload.create! valid_model_attributes
      delete organization_upload_url(organization, upload)
      expect(response).to redirect_to(organization_uploads_url(organization))
    end
  end
end
